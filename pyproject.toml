[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "p2p-agent"
version = "0.1.0"
description = "Distributed Peer-to-Peer AI Agents"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "P2P Agent Team", email = "developers@p2p-agent.org"},
]
maintainers = [
    {name = "P2P Agent Team", email = "maintainers@p2p-agent.org"}
]
keywords = [
    "ai", "ml", "p2p", "distributed", "agents", "federated-learning", 
    "edge-computing", "decentralized", "networking"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
    "Topic :: System :: Networking"
]
dependencies = [
    "libp2p>=0.1.0",
    "asyncio-mqtt>=0.11.0",
    "websockets>=10.4",
    "httpx>=0.24.0",
    "transformers>=4.21.0",
    "torch>=1.12.0",
    "sentence-transformers>=2.2.0",
    "spacy>=3.4.0",
    "scikit-learn>=1.1.0",
    "numpy>=1.21.0",
    "pandas>=1.4.0",
    "pydantic>=1.10.0",
    "sqlalchemy>=1.4.0",
    "redis>=4.3.0",
    "ipfshttpclient>=0.8.0",
    "cryptography>=37.0.0",
    "pynacl>=1.5.0",
    "jwcrypto>=1.4.0",
    "click>=8.1.0",
    "python-dotenv>=0.20.0",
    "structlog>=22.1.0",
    "rich>=12.5.0",
    "typer>=0.6.0"
]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "black>=23.0",
    "isort>=5.0",
    "mypy>=1.0",
    "ruff>=0.1.0",
]
docs = [
    "sphinx>=7.0",
    "sphinx-rtd-theme>=1.0",
    "myst-parser>=2.0",
]
gpu = [
    "torch>=2.0",
    "transformers>=4.0",
]
all = [
    "p2p-agent[dev,docs,gpu]"
]

[project.urls]
Homepage = "https://github.com/yourusername/p2p-agent"
Documentation = "https://p2p-agent.readthedocs.io/"
Repository = "https://github.com/yourusername/p2p-agent.git"
"Bug Tracker" = "https://github.com/yourusername/p2p-agent/issues"
Changelog = "https://github.com/yourusername/p2p-agent/blob/main/CHANGELOG.md"
Discussions = "https://github.com/yourusername/p2p-agent/discussions"

[project.scripts]
p2p-agent = "p2p_ai_agents.cli:main"
p2p-agent-server = "p2p_ai_agents.server:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["p2p_ai_agents*"]

[tool.setuptools_scm]
write_to = "src/p2p_ai_agents/_version.py"

# Black configuration
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["p2p_ai_agents"]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "libp2p.*",
    "ipfshttpclient.*",
    "spacy.*"
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "network: marks tests that require network access",
    "gpu: marks tests that require GPU"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "*/tests/*",
    "*/__pycache__/*",
    "*/site-packages/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:"
]
