#!/bin/bash
#
# External Supabase Setup Script
# This script helps configure the environment to use an external Supabase instance
# for development/testing when Docker is not available (e.g., GitHub Codespaces)
#

set -e

echo "üîß External Supabase Configuration Setup"
echo "========================================"
echo ""

# Check if we're in the right directory
if [ ! -f "Cargo.toml" ]; then
    echo "‚ùå Error: This script must be run from the project root directory"
    echo "   Current directory: $(pwd)"
    echo "   Expected: /workspaces/p2p-ai-agents"
    exit 1
fi

echo "üìã This script will help you configure an external Supabase instance for development."
echo "   If you haven't created a Supabase project yet, please:"
echo "   1. Go to https://supabase.com"
echo "   2. Create a new project"
echo "   3. Get your API keys from Settings ‚Üí API"
echo ""

# Get Supabase configuration from user
read -p "Enter your Supabase Project URL (https://your-ref.supabase.co): " SUPABASE_URL
read -p "Enter your Supabase Anon Key: " SUPABASE_ANON_KEY
read -p "Enter your Supabase Service Role Key: " SUPABASE_SERVICE_ROLE_KEY

# Validate inputs
if [[ ! "$SUPABASE_URL" =~ ^https://.*\.supabase\.co$ ]]; then
    echo "‚ùå Error: Invalid Supabase URL format"
    echo "   Expected: https://your-ref.supabase.co"
    echo "   Got: $SUPABASE_URL"
    exit 1
fi

if [[ ${#SUPABASE_ANON_KEY} -lt 100 ]]; then
    echo "‚ùå Error: Anon key seems too short (expected JWT token)"
    exit 1
fi

if [[ ${#SUPABASE_SERVICE_ROLE_KEY} -lt 100 ]]; then
    echo "‚ùå Error: Service role key seems too short (expected JWT token)"
    exit 1
fi

echo ""
echo "üìù Creating .env configuration..."

# Create/update .env file
cat > .env << EOF
# Supabase Configuration (External Instance)
# Generated by setup_external_supabase.sh at $(date)
SUPABASE_URL=$SUPABASE_URL
SUPABASE_ANON_KEY=$SUPABASE_ANON_KEY
SUPABASE_SERVICE_ROLE_KEY=$SUPABASE_SERVICE_ROLE_KEY

# Test Configuration
TEST_TABLE_NAME=test_storage
TEST_BUCKET_NAME=test-bucket

# Development Settings
RUST_LOG=debug
RUST_BACKTRACE=1
EOF

echo "‚úÖ .env file created/updated"

# Test connection
echo ""
echo "üîç Testing connection to Supabase..."

# Test basic connectivity
curl_output=$(curl -s -w "%{http_code}" -o /tmp/supabase_test.json \
    -H "apikey: $SUPABASE_ANON_KEY" \
    -H "Authorization: Bearer $SUPABASE_ANON_KEY" \
    "$SUPABASE_URL/rest/v1/" 2>/dev/null)

http_code="${curl_output: -3}"

if [ "$http_code" = "200" ]; then
    echo "‚úÖ Connection successful!"
    echo "   HTTP Status: $http_code"
    echo "   API Response: $(cat /tmp/supabase_test.json | head -c 100)..."
else
    echo "‚ùå Connection failed"
    echo "   HTTP Status: $http_code"
    echo "   Response: $(cat /tmp/supabase_test.json 2>/dev/null || echo 'No response')"
    exit 1
fi

# Cleanup
rm -f /tmp/supabase_test.json

echo ""
echo "üß™ Testing Rust adapter..."

# Test Rust compilation and basic functionality
if cargo check --features supabase 2>/dev/null; then
    echo "‚úÖ Rust code compiles successfully"
else
    echo "‚ùå Rust compilation issues detected"
    echo "   Run 'cargo check --features supabase' for details"
fi

echo ""
echo "üéâ Setup Complete!"
echo ""
echo "Next steps:"
echo "1. Run tests: cargo test storage::supabase --features supabase"
echo "2. Create database schema in Supabase SQL Editor:"
echo "   - Tables for your application"
echo "   - Storage buckets if needed"
echo "3. Start developing with the Rust adapter"
echo ""
echo "Configuration saved to .env"
echo "Supabase URL: $SUPABASE_URL"
echo ""
echo "For troubleshooting, see: lab/config/supabase/UPDATED_TROUBLESHOOTING.md"
