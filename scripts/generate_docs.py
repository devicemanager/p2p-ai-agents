#!/usr/bin/env python3
"""
Smart Documentation Template Generator
Creates consistent documentation from templates with smart defaults.
"""

import os
import sys
import argparse
from pathlib import Path
from datetime import datetime
from typing import Dict, Any

class DocTemplateGenerator:
    def __init__(self, project_root: str):
        self.project_root = Path(project_root)
        self.docs_dir = self.project_root / "docs"
        self.templates_dir = self.docs_dir / "templates"
        
    def get_template_vars(self, doc_type: str, **kwargs) -> Dict[str, Any]:
        """Get template variables with smart defaults"""
        base_vars = {
            'current_date': datetime.now().strftime('%Y-%m-%d'),
            'current_version': '0.1.0',
            'project_name': 'P2P AI Agents',
            'project_repo': 'p2p-ai-agents'
        }
        
        # Add doc-type specific defaults
        if doc_type == 'implementation':
            base_vars.update({
                'component_name': kwargs.get('name', 'Component'),
                'status': 'In Development',
                'rust_version': '1.75.0'
            })
        elif doc_type == 'architecture':
            base_vars.update({
                'diagram_needed': True,
                'complexity': 'Medium'
            })
        elif doc_type == 'user-guide':
            base_vars.update({
                'difficulty': 'Beginner',
                'prerequisites': 'Basic understanding of P2P networks'
            })
            
        # Override with provided kwargs
        base_vars.update(kwargs)
        return base_vars
    
    def generate_implementation_doc(self, component_name: str, output_path: Path, **kwargs):
        """Generate implementation documentation"""
        vars = self.get_template_vars('implementation', name=component_name, **kwargs)
        
        template = f"""# {vars['component_name']} Implementation

## Version Information
- Current Version: {vars['current_version']}
- Last Updated: {vars['current_date']}
- Status: {vars['status']}
- Minimum Rust Version: {vars['rust_version']}

## Table of Contents
1. [Overview](#overview)
2. [Implementation Status](#implementation-status)
3. [Key Features](#key-features)
4. [Dependencies](#dependencies)
5. [Getting Started](#getting-started)
6. [API Reference](#api-reference)
7. [Testing](#testing)
8. [Performance Considerations](#performance-considerations)
9. [Security Considerations](#security-considerations)
10. [Related Documentation](#related-documentation)

## Overview
The {vars['component_name'].lower()} implementation provides [DESCRIPTION NEEDED]. This component is part of the {vars['project_name']} system and handles [FUNCTIONALITY NEEDED].

## Implementation Status

### Core Components
- [ ] Basic structure
- [ ] Core functionality
- [ ] Error handling
- [ ] Testing

### In Progress
- [ ] Performance optimization
- [ ] Security enhancements
- [ ] Documentation completion

### Pending
- [ ] Advanced features
- [ ] Integration testing
- [ ] Monitoring integration

## Key Features
- [FEATURE 1]
- [FEATURE 2]
- [FEATURE 3]

## Dependencies
```toml
[dependencies]
# Add relevant dependencies here
```

## Getting Started

### Basic Usage
```rust
use crate::{vars['component_name'].lower()}::*;

// Basic usage example
let component = {vars['component_name']}::new()?;
component.initialize().await?;
```

### Configuration
```rust
let config = {vars['component_name']}Config {{
    // Configuration options
}};
```

## API Reference

### Core Types
```rust
// Define main types here
```

### Main Functions
```rust
// Define main API functions here
```

## Testing

### Unit Tests
```bash
cargo test {vars['component_name'].lower()}::tests
```

### Integration Tests
```bash
cargo test --test {vars['component_name'].lower()}_integration
```

## Performance Considerations
- [PERFORMANCE NOTE 1]
- [PERFORMANCE NOTE 2]

## Security Considerations
- [SECURITY NOTE 1]  
- [SECURITY NOTE 2]

## Related Documentation
- [System Overview](../architecture/system-overview.md)
- [Development Guide](../development/README.md)
- [Testing Guide](../development/testing-guide.md)

---
Last updated: {vars['current_date']}
Generated by documentation template system
"""
        
        output_path.parent.mkdir(parents=True, exist_ok=True)
        with open(output_path, 'w') as f:
            f.write(template)
            
        print(f"✅ Generated implementation doc: {output_path}")
    
    def generate_architecture_doc(self, component_name: str, output_path: Path, **kwargs):
        """Generate architecture documentation"""
        vars = self.get_template_vars('architecture', name=component_name, **kwargs)
        
        template = f"""# {vars['component_name']} Architecture

## Version Information
- Current Version: {vars['current_version']}
- Last Updated: {vars['current_date']}
- Complexity: {vars['complexity']}

## Overview
This document describes the architecture of the {vars['component_name'].lower()} component within the {vars['project_name']} system.

## System Context
```
[SYSTEM CONTEXT DIAGRAM NEEDED]
```

## Component Overview
```
[COMPONENT DIAGRAM NEEDED]  
```

## Key Design Decisions
1. **Decision 1**: [RATIONALE]
2. **Decision 2**: [RATIONALE]  
3. **Decision 3**: [RATIONALE]

## Data Flow
```
[DATA FLOW DIAGRAM NEEDED]
```

## Interface Definitions

### Public API
```rust
// Public interface definitions
```

### Internal APIs
```rust
// Internal interface definitions
```

## Dependencies
- **External**: [List external dependencies]
- **Internal**: [List internal component dependencies]

## Quality Attributes

### Performance
- [Performance requirements and design decisions]

### Security  
- [Security requirements and design decisions]

### Scalability
- [Scalability requirements and design decisions]

### Reliability
- [Reliability requirements and design decisions]

## Design Patterns Used
- [Pattern 1]: [Usage description]
- [Pattern 2]: [Usage description]

## Trade-offs and Alternatives
- [Trade-off 1]: [Description and rationale]
- [Trade-off 2]: [Description and rationale]

## Future Considerations
- [Future enhancement 1]
- [Future enhancement 2]

## Related Documentation
- [Implementation Guide](../implementation/{vars['component_name'].lower()}.md)
- [System Overview](system-overview.md)
- [Security Architecture](security.md)

---
Last updated: {vars['current_date']}
Generated by documentation template system
"""
        
        output_path.parent.mkdir(parents=True, exist_ok=True)
        with open(output_path, 'w') as f:
            f.write(template)
            
        print(f"✅ Generated architecture doc: {output_path}")
    
    def generate_user_guide(self, guide_name: str, output_path: Path, **kwargs):
        """Generate user guide documentation"""
        vars = self.get_template_vars('user-guide', name=guide_name, **kwargs)
        
        template = f"""# {vars['name']} Guide

## Overview
This guide explains how to [GUIDE PURPOSE].

**Difficulty Level**: {vars['difficulty']}
**Prerequisites**: {vars['prerequisites']}

## Table of Contents
1. [Prerequisites](#prerequisites)
2. [Getting Started](#getting-started)
3. [Step-by-Step Instructions](#step-by-step-instructions)
4. [Common Issues](#common-issues)
5. [Advanced Usage](#advanced-usage)
6. [Related Guides](#related-guides)

## Prerequisites
- [PREREQUISITE 1]
- [PREREQUISITE 2]
- [PREREQUISITE 3]

## Getting Started

### Quick Start
```bash
# Quick start commands
```

### Detailed Setup
1. **Step 1**: [Description]
   ```bash
   # Commands for step 1
   ```

2. **Step 2**: [Description]
   ```bash
   # Commands for step 2
   ```

## Step-by-Step Instructions

### Task 1: [Task Name]
1. [Instruction 1]
2. [Instruction 2]
3. [Instruction 3]

### Task 2: [Task Name]
1. [Instruction 1]
2. [Instruction 2]
3. [Instruction 3]

## Common Issues

### Issue 1: [Issue Description]
**Symptoms**: [Symptoms]
**Cause**: [Cause]
**Solution**: [Solution]

### Issue 2: [Issue Description]
**Symptoms**: [Symptoms]
**Cause**: [Cause]
**Solution**: [Solution]

## Advanced Usage

### Advanced Feature 1
[Description and examples]

### Advanced Feature 2
[Description and examples]

## Related Guides
- [Getting Started](getting-started.md)
- [Troubleshooting](troubleshooting.md)
- [Security Best Practices](security-best-practices.md)

## Support
For additional help:
- Check the [Troubleshooting Guide](troubleshooting.md)
- Review the [FAQ](../FAQ.md)
- Open an issue on the project repository

---
Last updated: {vars['current_date']}
Generated by documentation template system
"""
        
        output_path.parent.mkdir(parents=True, exist_ok=True)
        with open(output_path, 'w') as f:
            f.write(template)
            
        print(f"✅ Generated user guide: {output_path}")

def main():
    parser = argparse.ArgumentParser(description="Generate documentation from smart templates")
    parser.add_argument('type', choices=['implementation', 'architecture', 'user-guide'], 
                       help='Type of documentation to generate')
    parser.add_argument('name', help='Component/guide name')
    parser.add_argument('--output', '-o', help='Output file path (relative to docs/)')
    parser.add_argument('--status', default='In Development', help='Implementation status')
    parser.add_argument('--difficulty', default='Beginner', help='Guide difficulty level')
    
    args = parser.parse_args()
    
    # Determine output path
    if args.output:
        output_path = Path(f"/workspaces/p2p-ai-agents/docs/{args.output}")
    else:
        if args.type == 'implementation':
            output_path = Path(f"/workspaces/p2p-ai-agents/docs/implementation/{args.name.lower()}.md")
        elif args.type == 'architecture':
            output_path = Path(f"/workspaces/p2p-ai-agents/docs/architecture/{args.name.lower()}.md")
        elif args.type == 'user-guide':
            output_path = Path(f"/workspaces/p2p-ai-agents/docs/user-guides/{args.name.lower()}.md")
    
    generator = DocTemplateGenerator("/workspaces/p2p-ai-agents")
    
    kwargs = {
        'status': args.status,
        'difficulty': args.difficulty
    }
    
    if args.type == 'implementation':
        generator.generate_implementation_doc(args.name, output_path, **kwargs)
    elif args.type == 'architecture':
        generator.generate_architecture_doc(args.name, output_path, **kwargs)
    elif args.type == 'user-guide':
        generator.generate_user_guide(args.name, output_path, **kwargs)
    
    print(f"\n💡 Don't forget to:")
    print(f"   1. Fill in the [PLACEHOLDER] sections")
    print(f"   2. Add the new doc to the relevant index")
    print(f"   3. Update cross-references in related docs")
    print(f"   4. Run scripts/maintain_docs.sh to ensure consistency")

if __name__ == "__main__":
    main()
