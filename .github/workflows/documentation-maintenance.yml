name: 🔧 Documentation Auto-Maintenance

on:
  schedule:
    # Run weekly on Sundays at 02:00 UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update all documentation timestamps'
        required: false
        default: false
        type: boolean

jobs:
  auto-maintenance:
    name: 🔧 Automatic Documentation Maintenance
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: ⚙️ Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "Documentation Bot"
        
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: 📦 Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
      continue-on-error: true
    
    - name: 📦 Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements-docs.txt ]; then pip install -r requirements-docs.txt; fi
        pip install PyYAML pathlib2
        
    - name: 🔧 Run Documentation Maintenance
      run: |
        echo "🔧 Running documentation maintenance..."
        chmod +x scripts/maintain_docs.sh
        ./scripts/maintain_docs.sh
        
    - name: 📊 Check for Changes
      id: changes
      run: |
        if [[ -n $(git status --porcelain) ]]; then
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "📝 Changes detected in documentation"
        else
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "✅ No changes needed"
        fi
        
    - name: 📝 Create Maintenance Summary
      if: steps.changes.outputs.changes == 'true'
      run: |
        echo "## 🔧 Automated Documentation Maintenance" > maintenance_summary.md
        echo "" >> maintenance_summary.md
        echo "This automated maintenance run has updated the following:" >> maintenance_summary.md
        echo "" >> maintenance_summary.md
        
        # Show what files were modified
        echo "### Modified Files:" >> maintenance_summary.md
        git status --porcelain | while read line; do
          echo "- \`$line\`" >> maintenance_summary.md
        done
        
        echo "" >> maintenance_summary.md
        echo "### Changes Made:" >> maintenance_summary.md
        echo "- 🕒 Updated timestamps to $(date +%Y-%m-%d)" >> maintenance_summary.md
        echo "- 🔗 Fixed common link patterns" >> maintenance_summary.md
        echo "- 📁 Ensured all directories have README files" >> maintenance_summary.md
        echo "- 📚 Updated quick reference documentation" >> maintenance_summary.md
        echo "" >> maintenance_summary.md
        echo "---" >> maintenance_summary.md
        echo "*Automated by Documentation Maintenance Bot 🤖*" >> maintenance_summary.md
        
    - name: 💾 Commit Changes
      if: steps.changes.outputs.changes == 'true'
      run: |
        git add .
        git commit -m "📚 chore: automated documentation maintenance

        - Updated timestamps to $(date +%Y-%m-%d)
        - Fixed common documentation patterns
        - Ensured directory structure consistency
        - Updated cross-references

        Generated by GitHub Actions workflow"
        
    - name: 🚀 Create Pull Request
      if: steps.changes.outputs.changes == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        branch: docs/auto-maintenance
        title: "📚 Automated Documentation Maintenance"
        body-path: maintenance_summary.md
        labels: |
          documentation
          automated
          maintenance
        reviewers: |
          # Add your team members here
        assignees: |
          # Add assignees here
        delete-branch: true
        
    - name: 📈 Generate Maintenance Report
      if: always()
      run: |
        echo "📈 Documentation Maintenance Report" > maintenance_report.md
        echo "====================================" >> maintenance_report.md
        echo "" >> maintenance_report.md
        echo "**Date**: $(date)" >> maintenance_report.md
        echo "**Trigger**: ${{ github.event_name }}" >> maintenance_report.md
        echo "**Changes Made**: ${{ steps.changes.outputs.changes }}" >> maintenance_report.md
        echo "" >> maintenance_report.md
        
        # Documentation stats
        doc_count=$(find docs -name "*.md" | wc -l)
        echo "📊 **Statistics**:" >> maintenance_report.md
        echo "- Documentation files: $doc_count" >> maintenance_report.md
        echo "- Last maintenance: $(date)" >> maintenance_report.md
        
        if [[ "${{ steps.changes.outputs.changes }}" == "true" ]]; then
          echo "- Action taken: Created maintenance PR" >> maintenance_report.md
        else
          echo "- Action taken: No changes needed" >> maintenance_report.md
        fi
        
        echo "" >> maintenance_report.md
        echo "Generated by GitHub Actions 🤖" >> maintenance_report.md
        
    - name: 📤 Upload Maintenance Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: maintenance-report
        path: maintenance_report.md
        retention-days: 90
