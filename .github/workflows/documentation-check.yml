name: 📚 Documentation Quality Check

on:
  pull_request:
    paths:
      - 'docs/**'
      - 'README.md'
      - 'CHANGELOG.md'
      - '*.md'
  push:
    branches: [main, master, develop]
    paths:
      - 'docs/**'
      - 'README.md'
      - 'CHANGELOG.md'
      - '*.md'

jobs:
  documentation-quality:
    name: 🔍 Check Documentation Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: 📦 Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
      continue-on-error: true
    
    - name: 📦 Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements-docs.txt ]; then pip install -r requirements-docs.txt; fi
        # Fallback to manual installation if requirements file doesn't exist
        pip install PyYAML pathlib2
        
    - name: 🔍 Validate Documentation Consistency
      run: |
        echo "🔍 Running documentation validation..."
        python scripts/validate_docs.py
      continue-on-error: true
        
    - name: 📋 Check for TODO/FIXME Items
      run: |
        echo "📋 Checking for incomplete documentation..."
        if grep -r "TODO\|FIXME" docs/ --include="*.md"; then
          echo "⚠️  Found TODO/FIXME items in documentation"
          echo "Consider completing these before merging"
          exit 1
        else
          echo "✅ No TODO/FIXME items found"
        fi
        
    - name: 🔗 Validate Internal Links
      run: |
        echo "🔗 Checking internal links..."
        # Basic link validation
        find docs -name "*.md" -exec grep -l "](.*\.md)" {} \; | while read file; do
          echo "Checking links in $file"
          grep -o "](.*\.md)" "$file" | sed 's/^](//' | sed 's/)$//' | while read link; do
            if [[ "$link" == ../* ]]; then
              # Handle relative links
              target_dir=$(dirname "$file")
              target_path="$target_dir/$link"
              normalized_path=$(readlink -m "$target_path")
              if [[ ! -f "$normalized_path" ]]; then
                echo "❌ Broken link in $file: $link"
                exit 1
              fi
            elif [[ "$link" != http* && "$link" != "#"* ]]; then
              # Handle same-directory links
              target_dir=$(dirname "$file")
              target_path="$target_dir/$link"
              if [[ ! -f "$target_path" ]]; then
                echo "❌ Broken link in $file: $link"
                exit 1
              fi
            fi
          done
        done
        echo "✅ All internal links validated"
        
    - name: 📐 Check Markdown Formatting
      uses: DavidAnson/markdownlint-action@v1
      with:
        files: 'docs/**/*.md'
        config: 'docs/.markdownlint.json'
        ignore: 'CHANGELOG.md'
        
    - name: 📊 Generate Documentation Report
      if: always()
      run: |
        echo "📊 Documentation Quality Report" > doc_report.md
        echo "=================================" >> doc_report.md
        echo "" >> doc_report.md
        echo "**Repository**: ${{ github.repository }}" >> doc_report.md
        echo "**Branch**: ${{ github.ref_name }}" >> doc_report.md
        echo "**Commit**: ${{ github.sha }}" >> doc_report.md
        echo "**Date**: $(date)" >> doc_report.md
        echo "" >> doc_report.md
        
        # Count documentation files
        doc_count=$(find docs -name "*.md" | wc -l)
        echo "📝 **Documentation Files**: $doc_count" >> doc_report.md
        
        # Check for completeness
        incomplete_count=$(grep -r "TODO\|FIXME\|\[DESCRIPTION NEEDED\]\|\[PLACEHOLDER\]" docs/ --include="*.md" | wc -l || echo "0")
        echo "⚠️  **Incomplete Sections**: $incomplete_count" >> doc_report.md
        
        # Version consistency
        versions=$(grep -r "Current Version:" docs/ --include="*.md" | cut -d: -f3 | sort | uniq | wc -l || echo "1")
        echo "🔄 **Version Consistency**: $([ $versions -eq 1 ] && echo "✅ Good" || echo "❌ Inconsistent")" >> doc_report.md
        
        echo "" >> doc_report.md
        echo "Generated by GitHub Actions 🤖" >> doc_report.md
        
    - name: 📤 Upload Documentation Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: documentation-quality-report
        path: doc_report.md
        retention-days: 30
