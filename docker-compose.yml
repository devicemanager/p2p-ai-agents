version: '3.8'

# P2P AI Agents Docker Compose Configuration
# This setup provides a complete development and testing environment
# with all necessary dependencies pre-configured

services:
  # P2P AI Agent - Main application
  # Built from Dockerfile which includes all Rust compilation dependencies
  p2p-agent:
    build: .
    container_name: p2p-ai-agent
    ports:
      - "8000:8000"    # P2P networking
      - "8080:8080"    # Monitoring/dashboard
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    environment:
      - AGENT_NAME=docker-agent
      - LOG_LEVEL=INFO
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - redis
    networks:
      - p2p-network
    restart: unless-stopped

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: p2p-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - p2p-network
    restart: unless-stopped

  # IPFS node (optional)
  ipfs:
    image: ipfs/go-ipfs:latest
    container_name: p2p-ipfs
    ports:
      - "4001:4001"    # P2P
      - "5001:5001"    # API
      - "8081:8080"    # Gateway
    volumes:
      - ipfs_data:/data/ipfs
    networks:
      - p2p-network
    restart: unless-stopped

  # Monitoring stack (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: p2p-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - p2p-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: p2p-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - p2p-network
    restart: unless-stopped

volumes:
  redis_data:
  ipfs_data:
  prometheus_data:
  grafana_data:

networks:
  p2p-network:
    driver: bridge
